name: Deploy Registration App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3️⃣ Login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 4️⃣ Build & push frontend
      - name: Build & Push Frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ env.ECR_REGISTRY }}/registration-frontend:latest
          build-args: |
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}

      # 5️⃣ Build & push backend
      - name: Build & Push Backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.ECR_REGISTRY }}/registration-backend:latest

      # 6️⃣ Copy docker-compose file to EC2
      - name: Copy docker-compose file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: docker-compose.app.yml
          target: ~/app
          port: 22

      # 7️⃣ Deploy on EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 10m
          script: |
            set -e

            # Create app directory and navigate
            mkdir -p ~/app
            cd ~/app

            # Update system and install dependencies
            sudo apt update -y
            sudo apt install -y docker.io unzip curl python3-pip

            # Install docker-compose plugin if missing
            if ! command -v docker-compose &> /dev/null
            then
              sudo apt install -y docker-compose-plugin
            fi

            # Install AWS CLI v2 if missing
            if ! command -v aws &> /dev/null
            then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install --update
            fi

            # Login Docker to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} \
              | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            # Pull and run Docker containers
            sudo docker compose -f docker-compose.app.yml pull
            sudo docker compose -f docker-compose.app.yml up -d --remove-orphans
















         



